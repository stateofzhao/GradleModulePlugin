//由于"二级grad了：publish-gradle-portal.gradle的 buildscript{}块不会执行，所以只能先放到这里了"
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.gradle.publish:plugin-publish-plugin:1.0.0'
    }
}

//它前面只允许 buildscript{} 和 其它plugins{} 块
plugins {
    id 'java-gradle-plugin' // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins（开发Gradle插件必须声明）
}

apply from: 'publish-maven.gradle' //发布到maven仓库
//apply from: 'publish-gradle-portal.gradle'//发布到gradle portal插件仓库

//【项目】自身需要的资源。【在本项目中就是自己写的插件代码中需要用到】
dependencies{
    implementation gradleApi()
    implementation localGroovy()

    repositories {
        mavenCentral()
        mavenLocal()
        google()
    }
    implementation 'com.android.tools.build:gradle:7.0.0'
    implementation 'org.json:json:20171018'
}

/** buildscript中的声明是 <<<gradle【脚本】自身>>> 需要使用的资源（换句话说就是本项目进行编译时需要的依赖）,
 可以声明的资源包括依赖项、第三方插件、maven仓库地址等，
 用来支持其它build脚本的运行。所以你应当将这部分的引用放置在buildscript代码块中。gradle在执行脚本时，会优先执行buildscript代码块中的内容，
 然后才会执行剩余的build脚本。
 此外在 buildscript 块中可以使用
 dependencies {
 classpath 'org.apache.commons:commons-csv:1.0'
 }
 classpath 这种形式的依赖声明，该classpath声明说明了在执行其余的build脚本时，class loader可以使用这些你提供的依赖项。
 【在本项目中的代码是引用不到这里面声明的依赖的，是gradle运行时自己用到的依赖】*/
//buildscript {
//    //设置依赖源
//    repositories {
//        jcenter()
//        maven {
//            url 'https://dl.google.com/dl/android/maven2/'
//            name 'Google'
//        }
//    }
//    //设置依赖，这样设置后相当于本脚本"继承"了com.android.tools.build:gradle，具有了 com.android.tools.build:gradle 所具有的功能
//    dependencies {
//        classpath 'com.android.tools.build:gradle:3.2.1'
//    }
//}
//写插件需要的#####################################################################################END
