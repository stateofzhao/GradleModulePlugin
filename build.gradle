//必须在 plugins{} 代码块前声明
buildscript {
    repositories {
        mavenCentral()
    }
}
//它前面只允许 buildscript{} 和 其它plugins{} 块
plugins{
    id 'java-gradle-plugin' // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins（负责生成插件文件）
    id 'com.gradle.plugin-publish' version '0.18.0' //发布插件文件和插件源代码到【Gradle官方插件库】用的，pluginBundle{}配置块来自它
    id 'maven-publish' //generate the published metadata for your plugin（生成插件文件的原始数据，例如，编译好的jar和java doc）
    id 'java-library'//发布远程maven用
    id 'java'//发布远程maven用
    id 'signing'//发布远程maven用
}
//写插件需要的#####################################################################################START
apply plugin: 'groovy'

//【项目】自身需要的资源。【在本项目中就是自己写的插件代码中需要用到】
dependencies{
    implementation gradleApi()
    implementation localGroovy()

    repositories {
        mavenCentral()
        mavenLocal()
        google()
    }
    implementation 'com.android.tools.build:gradle:3.2.1'
    implementation 'org.json:json:20171018'
}

/** buildscript中的声明是 <<<gradle【脚本】自身>>> 需要使用的资源（换句话说就是本项目进行编译时需要的依赖）,
 可以声明的资源包括依赖项、第三方插件、maven仓库地址等，
 用来支持其它build脚本的运行。所以你应当将这部分的引用放置在buildscript代码块中。gradle在执行脚本时，会优先执行buildscript代码块中的内容，
 然后才会执行剩余的build脚本。
 此外在 buildscript 块中可以使用
 dependencies {
 classpath 'org.apache.commons:commons-csv:1.0'
 }
 classpath 这种形式的依赖声明，该classpath声明说明了在执行其余的build脚本时，class loader可以使用这些你提供的依赖项。
 【在本项目中的代码是引用不到这里面声明的依赖的，是gradle运行时自己用到的依赖】*/
//buildscript {
//    //设置依赖源
//    repositories {
//        jcenter()
//        maven {
//            url 'https://dl.google.com/dl/android/maven2/'
//            name 'Google'
//        }
//    }
//    //设置依赖，这样设置后相当于本脚本"继承"了com.android.tools.build:gradle，具有了 com.android.tools.build:gradle 所具有的功能
//    dependencies {
//        classpath 'com.android.tools.build:gradle:3.2.1'
//    }
//}
//写插件需要的#####################################################################################END

//发布插件需要的#####################################################################################START
def POM_URL = 'https://github.com/stateofzhao/GradleMoudlePlugin'
def VCS_URL = 'https://github.com/stateofzhao/GradleMoudlePlugin.git'
def POM_NAME = 'GradleModulePlugin'
def POM_DESC = 'android moudle lib app manager plugin'
def GROUP = 'io.github.stateofzhao'
def VERSION_NAME = '1.0.1-SNAPSHOT'
def PLUGIN_ID = 'io.github.stateofzhao'

group = GROUP                   //指定仓库的groupId
version = VERSION_NAME          //发布到仓库的版本

def isReleaseVersion = !version.endsWith("SNAPSHOT")

//--------------------------------------------------------------------------------------------以plugin文件的形式发布---start
//生成二进制插件----------------------------------------------start
//通过这个来生成 xxx.gradle.plugin 文件的，xxx通过下面的id属性配置；
//调用方通过：apply plugin: 'xxx' 来引用这个 xxx.gradle.plugin文件，如果发布到Gradle官方插件库的话，可以直接通过plugins{id 'xxx'}来快速引用；
//gradlePlugin {
//    // Define the plugin
//    plugins {
//        funmodule {
//            id = PLUGIN_ID
//            implementationClass = 'com.zfun.funmodule.processplug.ModulesConfigPlugin'
//            displayName = POM_NAME
//            description = POM_DESC
//        }
//    }
//}//生成二进制插件-----------------------------------------------end

//批量配置插件的描述信息
pluginBundle {
    website = POM_URL
    vcsUrl = VCS_URL
    description = POM_DESC

    plugins{
        funmodule{//名称需要在上面的gradlePlugin{plugins{xxx{}}}代码块中声明
            //id 会被 【java-gradle-plugin插件】 自动配置。
            //website、vcsUrl等，如果不配置将使用 pluginBundle 中的配置。
            //displayName = POM_NAME 如果不配置将使用 gradlePlugin{plugins{xxx{}}} 中的配置。
            tags = ['Android Module','Lib App']
        }
    }
}

//发布插件到 Gradle官方插件库：
//1，去 https://plugins.gradle.org/user/register 注册，获取官方插件库授权
//2，`gradle.properties`文件中配置
// gradle.publish.key=xxx
// grade. publish.secret=xxx
//3，使用如下命令，发布到Gradle官方插件库
//`./gradlew publishPlugins`
//--------------------------------------------------------------------------------------------以plugin文件的形式发布---end

//--------------------------------------------------------------------------------------------以Maven形式发布---start
//Maven形式发布时，必须通过 buildscript block 方式来引用插件，插件Id通过 `main/resources/META-INF/gradle-plugins` 方式来声明；
//artifactId 默认为工程名称：GradleModulePlugin。最终引用方式为：
//buildscript{dependencies{classpath '${group}:${artifactId}:${version}'}}
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}
publishing {
    publications{
        funmodule(MavenPublication) {
            from components.java
            artifact sourceJar
            pom {
                name = POM_NAME
                description = POM_DESC
                url = POM_URL
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "zfun"
                        name = "zfun"
                        email = "stateofzhao@gmail.com"
                        url = "https://github.com/stateofzhao"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/stateofzhao/GradleMoudlePlugin.git"
                    developerConnection = "scm:git:https://github.com/stateofzhao/GradleMoudlePlugin.git"
                    url = "https://github.com/stateofzhao/GradleMoudlePlugin"
                }
            }
        }
    }
    //发布到指定仓库时，仓库信息的描述
    repositories {
        //发布到本地
        /*maven {
            url = uri('./../../repo')
        }*/
        //发布到OSSRH仓库
        maven{
            def releaseUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl

            credentials {
                if (rootProject.hasProperty("ossrhUsername") && rootProject.hasProperty("ossrhPassword")) {
                    username = rootProject.ossrhUsername
                    password = rootProject.ossrhPassword
                }
            }
        }
    }

    //发布到 Gradle官方插件库 时不需要签名
    if(!gradle.startParameter.taskNames.contains('publishPlugins')){
        signing{
            required { isReleaseVersion }//是否需要签名
            //发布maven仓库时需要签名的所有文件
            sign publishing.publications.funmodule
        }
    }
}//--------------------------------------------------------------------------------------------以Maven形式发布---end

//发布插件需要的#####################################################################################END